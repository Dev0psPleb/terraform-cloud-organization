# plan-on-pr.yaml
name: Plan / Test on PR

on:
  pull_request:
    branches: [main, development, staging]
defaults:
  run:
    working-directory: ./environment

jobs:
  lint:
    name: Lint
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Run terraform fmt check
        run: terraform fmt -check -diff -recursive ./

  plan_and_test:
    name: Plan and Test
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        path: [esg_se_xdr_demo_prod,nsg_amazon_playground,public_cloud_optix_demo]
        include:
          - environment: development
            url: https://github.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        run: |
          cd ${{ matrix.path }}
          terraform init -input=false

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd ${{ matrix.path }}
          Get-ChildItem -Path Env: -Recurse -Include TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
          $Repo = "${{ github.repository }}"
          $BaseUri = "https://api.github.com"
          $ArtifactUri = "$BaseUri/repos/$Repo/actions/artifacts"
          $Token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText
          $RestResponse = Invoke-RestMethod -Authentication Bearer -Uri $ArtifactUri -Token $Token | Select-Object -ExpandProperty artifacts
          if ($RestResponse){
            $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "terraformstatefile" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
            Write-Host "Most recent artifact URI = $MostRecentArtifactURI"
            if ($MostRecentArtifactURI){
              Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./state.zip
              Expand-Archive ./state.zip
              openssl enc -d -in ./state/terraform.tfstate.enc -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./terraform.tfstate
            }
          }
          terraform plan -input=false -no-color -out=tfplan
          terraform show -no-color tfplan
        shell: pwsh
        env:
          TF_VAR_add_vcs_repo: true
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_execution_mode: local
          TF_VAR_github_pat_token: ${{ secrets.GH_PAT_TOKEN }}
          TF_VAR_organization_name: ${{ matrix.path }}
          TF_VAR_terraform_api_token: ${{ secrets.TF_API_TOKEN }}
          TF_VAR_working_directory: "./environment/${{ matrix.path }}"
          TF_VAR_workspace_name: org_workspace
          TF_VAR_vcs_branch: development
          TF_VAR_vcs_repository: ${{ github.repository }}

      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## ${{ matrix.path }} plan
            ```diff
            + Green
            - Red
            ! Orange
            @@ Pink @@
            #Gray
            ${{ env.PLAN }}
            ```
